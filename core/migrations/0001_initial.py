# Generated by Django 5.2.6 on 2025-10-01 11:42

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('department_added', 'Department Added'), ('department_edited', 'Department Edited'), ('department_deleted', 'Department Deleted'), ('student_added', 'Student Added'), ('student_edited', 'Student Edited'), ('student_deleted', 'Student Deleted'), ('bulk_upload', 'Bulk Upload'), ('books_issued', 'Books Issued'), ('report_generated', 'Report Generated'), ('pending_generated', 'Pending Report Generated')], max_length=50)),
                ('description', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_code', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('quantity', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_code', models.CharField(max_length=10)),
                ('course', models.CharField(max_length=100)),
                ('program_type', models.CharField(blank=True, max_length=50, null=True)),
                ('year', models.CharField(blank=True, max_length=10, null=True)),
                ('intake', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('existing', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('two_hundred_notebook', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('two_hundred_record', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('two_hundred_observation', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('one_hundred_notebook', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('one_hundred_record', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('one_hundred_observation', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('total', models.PositiveIntegerField(blank=True, default=0, null=True)),
            ],
            options={
                'unique_together': {('course_code', 'year')},
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usn', models.CharField(max_length=20, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('year', models.CharField(blank=True, max_length=10, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dept_students', to='core.department')),
            ],
        ),
        migrations.CreateModel(
            name='PendingReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usn', models.CharField(max_length=20)),
                ('name', models.CharField(max_length=100)),
                ('course', models.CharField(max_length=100)),
                ('pn2', models.IntegerField(default=0)),
                ('pr2', models.IntegerField(default=0)),
                ('po2', models.IntegerField(default=0)),
                ('pn1', models.IntegerField(default=0)),
                ('pr1', models.IntegerField(default=0)),
                ('po1', models.IntegerField(default=0)),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pending_report', to='core.student')),
            ],
        ),
        migrations.CreateModel(
            name='IssueRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_code', models.CharField(max_length=10)),
                ('qty_issued', models.IntegerField()),
                ('date_issued', models.DateField(auto_now_add=True)),
                ('status', models.CharField(default='Issued', max_length=20)),
                ('remarks', models.CharField(blank=True, max_length=255, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issue_records', to='core.student')),
            ],
        ),
    ]
