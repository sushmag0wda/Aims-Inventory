## stationery_management/settings.py
"""
Django settings for stationery_management project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY') or os.environ.get('SECRET_KEY', 'django-insecure-k6aqo84*jngyw=$432s@^5m!utfao7y=r^$$*onomw4k2j1ejp')

# SECURITY WARNING: don't run with debug turned on in production!
debug_raw = os.environ.get('DJANGO_DEBUG', os.environ.get('DEBUG', 'True'))
DEBUG = str(debug_raw).lower() in ('1', 'true', 'yes', 'on')

_allowed_hosts = os.environ.get('DJANGO_ALLOWED_HOSTS') or os.environ.get('ALLOWED_HOSTS', '')
ALLOWED_HOSTS = [host.strip() for host in _allowed_hosts.split(',') if host.strip()]

render_host = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if render_host:
    ALLOWED_HOSTS.append(render_host.strip())

ALLOWED_HOSTS.extend([
    'aims-inventory.onrender.com',
    'localhost',
    '127.0.0.1',
    '[::1]',
])
ALLOWED_HOSTS = [host for i, host in enumerate(ALLOWED_HOSTS) if host and host not in ALLOWED_HOSTS[:i]]

_csrf_origins = os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS') or os.environ.get('CSRF_TRUSTED_ORIGINS', '')
CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in _csrf_origins.split(',') if origin.strip()]

if render_host:
    CSRF_TRUSTED_ORIGINS.append(f"https://{render_host.strip()}")

CSRF_TRUSTED_ORIGINS.extend([
    'https://aims-inventory.onrender.com',
])
CSRF_TRUSTED_ORIGINS = [origin for i, origin in enumerate(CSRF_TRUSTED_ORIGINS) if origin and origin not in CSRF_TRUSTED_ORIGINS[:i]]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',  # Added for Django Rest Framework
    'corsheaders',  # Added for CORS
    'core',  # Your app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Added for CORS
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'stationery_management.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Point to your templates folder
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'stationery_management.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# --- FIX 1: DEFINES THE DIRECTORY WHERE STATIC FILES ARE COLLECTED (Critical for collectstatic) ---
STATIC_ROOT = BASE_DIR / 'staticfiles' 

# DEFINES THE DIRECTORIES WHERE DJANGO LOOKS FOR STATIC FILES (Source folders)
STATICFILES_DIRS = [
    # Only list the ONE path you want Django to use for your source files
    BASE_DIR / 'core' / 'static', 
]

# --- FIX 2: EXPLICITLY TELL DJANGO WHICH FINDERS TO USE ---
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# WhiteNoise storage backend for serving compressed static assets in production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Media files (uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# CORS configuration
CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:5500", # Or your VS Code Live Server address
]
CORS_ALLOW_CREDENTIALS = True

# Custom User Model (Checked and confirmed)
AUTH_USER_MODEL = 'core.User'

# --- AUTHENTICATION SETTINGS ---
# CRITICAL: Defines the URL where users are redirected when they need to log in (used by @login_required)
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/dashboard/'